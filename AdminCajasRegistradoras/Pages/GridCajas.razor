@page "/cajas"

@using AdminCajasRegistradoras.Models
@using AdminCajasRegistradoras.DataAnnotations
@using System.ComponentModel.DataAnnotations
@inject AdminCajasRegistradoras.Data.ApplicationDbContext db
@inject ISnackbar Snackbar
@inject IDialogService Dialog


<MudText Typo="Typo.h3" GutterBottom="true">Cajas Registradoras</MudText>
<MudText Class="mb-8">Listado de las cajas registradoras</MudText>


<br />
<MudCard Elevation="2">
    @if (Cajas == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="Cajas" Hover="true" SortLabel="Sort By" Elevation="0" MultiSelection="true" Dense="true"
              Filter="new Func<Caja,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudTooltip Text="Adicionar">
                    <MudIconButton @onclick="Add" Icon="@Icons.Material.Filled.Add" Color=Color.Inherit></MudIconButton>
                </MudTooltip>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Buscar ..."
                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                    Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Caja, object>(x=>x.Nombre)">Nombre</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Caja, object>(x=>x.Numero)">Numero</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Caja, object>(x=>x.Ip)">Ip</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Caja, object>(x=>x.Puerto)">Puerto</MudTableSortLabel></MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Numero">@context.Numero</MudTd>
                <MudTd DataLabel="Ip">@context.Ip</MudTd>
                <MudTd DataLabel="Puerto">@context.Puerto</MudTd>
                <MudTd DataLabel="">
                    <MudMenu Label="Lectura" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                        <MudMenuItem>Cajero</MudMenuItem>
                        <MudMenuItem>PLUS</MudMenuItem>
                        <MudMenuItem>Modificadores</MudMenuItem>
                        <MudMenuItem>Tasa</MudMenuItem>
                    </MudMenu>
                    <MudMenu Label="Escritura" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                        <MudMenuItem>Cajero</MudMenuItem>
                        <MudMenuItem>PLUS</MudMenuItem>
                        <MudMenuItem>Modificadores</MudMenuItem>
                        <MudMenuItem>Tasa</MudMenuItem>
                    </MudMenu>
                    <MudTooltip Text="Detalles">
                        <MudFab @onclick="@(()=>Show(context))" Color=Color.Default Icon="@Icons.Material.Filled.Visibility" Size=Size.Medium> </MudFab>
                    </MudTooltip>
                    <MudTooltip Text="Editar">
                        <MudFab @onclick="@(()=>Edit(context))" Color=Color.Warning Icon="@Icons.Material.Filled.Edit" Size=Size.Medium> </MudFab>
                    </MudTooltip>
                    <MudTooltip Text="Eliminar">
                        <MudFab @onclick="@(()=>Delete(context))" Color=Color.Error Icon="@Icons.Material.Filled.Delete" Size=Size.Medium> </MudFab>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50}" />
            </PagerContent>
        </MudTable>
    }
</MudCard>



@code {
    private Caja cajaToSave = new Caja();
    private List<Caja> Cajas;
    private IDialogReference dialogReference;
    private string searchString;
    private DialogOptions dialogOptions = new DialogOptions { CloseButton = true};
    protected override void OnInitialized()
    {
        UpdateGrid();
    }
    private void UpdateGrid()
    {
        Cajas = db.Cajas.ToList();
    }
    private void OnCancelled()
    {
        dialogReference?.Close();
    }
    private void OnSuccessfullySave()
    {
        dialogReference?.Close();
        UpdateGrid();
        StateHasChanged();
    }
    private void OnSuccessfullyDeleted()
    {
        dialogReference?.Close();
        UpdateGrid();
        StateHasChanged();
    }

    private DialogParameters SetParametersForShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnSuccessfullySave", () => OnSuccessfullySave());
        parameters.Add("OnSuccessfullyDeleted", () => OnSuccessfullyDeleted());
        parameters.Add("OnCancelled", () => OnCancelled());
        return parameters;
    }
    private void Show(Caja pivot) 
    {
        var conf = db.Cajas.FirstOrDefault(a => a.Id == pivot.Id);
        if (conf == null)
        {
            Snackbar.Add($"El item que desea mostrar con id {pivot.Id} no existe", Severity.Warning);
            UpdateGrid();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", conf);
            parameters.Add("ShowMode", true);
            dialogReference = Dialog.Show<ShowCaja>("",parameters, dialogOptions);
        }
    }
    private void Add()
    {
        var parameters = SetParametersForShow();
        parameters.Add("item", new Caja());
        parameters.Add("EditMode", true);
        dialogReference = Dialog.Show<ShowCaja>("",parameters,dialogOptions);
    }
    private void Edit(Caja pivot)
    {
        var conf = db.Cajas.FirstOrDefault(a => a.Id == pivot.Id);
        if (conf == null)
        {
            Snackbar.Add($"El item que desea editar con id {pivot.Id} no existe", Severity.Warning);
            UpdateGrid();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", conf);
            parameters.Add("EditMode", true);
            dialogReference = Dialog.Show<ShowCaja>("", parameters, dialogOptions);        
        }
    }
    private void Delete(Caja pivot)
    {
        var conf = db.Cajas.FirstOrDefault(a => a.Id == pivot.Id);
        if (conf == null)
        {
            Snackbar.Add($"El item que desea eliminar con id {pivot.Id} no existe", Severity.Warning);
            UpdateGrid();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", conf);
            parameters.Add("DeleteMode", true);
            dialogReference = Dialog.Show<ShowCaja>("",parameters,dialogOptions);            
        }
    }

    private bool FilterFunc1(Caja item) => FilterFunc(item, searchString);

    private bool FilterFunc(Caja item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) || string.IsNullOrEmpty(searchString))
            return true;
        if (item.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((item.Numero + "").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.Ip.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((item.Puerto + "").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.Nombre} {item.Numero} {item.Ip} {item.Puerto}".Contains(searchString))
            return true;
        return false;
    }
}
