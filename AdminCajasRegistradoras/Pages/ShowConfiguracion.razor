@using AdminCajasRegistradoras.Models
@using AdminCajasRegistradoras.DataAnnotations

@inject AdminCajasRegistradoras.Data.ApplicationDbContext db
@inject ISnackbar Snackbar

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@CardHeader</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudTextField @bind-Value=item.Header Disabled=(!EditMode) Label="@Configuracion.HeaderName" Margin="Margin.Normal" Placeholder="@($"{Configuracion.HeaderName} ...")"
                                    Lines=6 Required="true" RequiredError="@($"{Configuracion.HeaderName} es requerido")">
                    </MudTextField>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudSwitch @bind-Checked=item.Activa Disabled=(!EditMode) Label="@Configuracion.ActivaName" Color=Color.Info 
                                     Required="true" RequiredError="@($"{Configuracion.ActivaName} es requerido")">
                    </MudSwitch>
                </MudItem>
                
            </MudGrid>
            <br />

            
            @if (ShowMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">Cancelar</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">Editar</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">Eliminar</MudButton>
            }
            @if (EditMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">Cancelar</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">Detalles</MudButton>
                <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)">Salvar</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="Color.Error">Eliminar</MudButton>
            }
            @if (DeleteMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Default">Cancelar</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="Color.Info">Detalles</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="Color.Warning">Editar</MudButton>
                <MudButton OnClick="Delete" Variant="Variant.Filled" Color="Color.Error">Eliminar</MudButton>
            }
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public Configuracion item { get; set; }

    [Parameter]
    public Action OnSuccessfullySave { get; set; }

    [Parameter]
    public Action OnSuccessfullyDeleted { get; set; }

    [Parameter]
    public Action OnCancelled { get; set; }

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public bool DeleteMode { get; set; }

    [Parameter]
    public bool ShowMode { get; set; }

    private bool success = false;

    private string CardHeader = string.Empty;
    private void UpdateCardHeader()
    {
        if (EditMode)
            CardHeader = "Adicionar / Editar";
        else if (DeleteMode)
            CardHeader = "Esta seguro que desea eliminar ?";
        else
            CardHeader = "Detalles";
    }
    
    
    protected override void OnParametersSet()
    {
        var justOneFlag = ShowMode ^ DeleteMode ^ EditMode;
        if (!justOneFlag)
            throw new ArgumentException("Must been provided just one mode and only one mode. "
                                      + "Either ShowMode, EditMode or DeleteMode.");
    }
    private void Cancel()
    {
        OnCancelled.Invoke();
    }
    private void Delete()
    {
        if (item == null || item.Id == null || item.Id == Guid.Empty)
        {
            Snackbar.Add($"El objeto que intenta borrar es null", Severity.Warning);
        }
        else
        {
            var configuracion = db.Configuraciones.FirstOrDefault(a => a.Id == item.Id);
            if (configuracion == null)
            {
                Snackbar.Add("El objeto que intenta borrar es null", Severity.Warning);
            }
            else
            {
                db.Configuraciones.Remove(configuracion);
                db.SaveChanges();
                Snackbar.Add("El objeto ha sido eliminado satisfactoriamente", Severity.Success);
                OnSuccessfullyDeleted.Invoke();
            }
        }
    }
    private void Save()
    {
        if (item.Id == Guid.Empty) //Crear
        {
            item.Id = Guid.NewGuid();
            db.Configuraciones.Add(item);
            db.SaveChanges();
            Snackbar.Add($"El objeto ha sido adicionado satisfactoriamente", Severity.Success);
            item = new Configuracion();
            OnSuccessfullySave.Invoke();
        }
        else if (item.Id != Guid.Empty) //Editar
        {
            var configuracion = db.Configuraciones.FirstOrDefault(c => c.Id == item.Id);
            if (configuracion == null)
            {
                Snackbar.Add($"El objeto con id {item.Id} que intenta editar no existe", Severity.Warning);
            }
            else
            {
                configuracion = item;
                db.SaveChanges();
                item = new Configuracion();
                Snackbar.Add($"El objeto ha sido editado satisfactoriamente", Severity.Success);
                OnSuccessfullySave.Invoke();
            }
        }
    }
    private void ChangeToEditMode()
    {
        EditMode = true;
        DeleteMode = false;
        ShowMode = false;
        UpdateCardHeader();
    }
    private void ChangeToDeleteMode()
    {
        EditMode = false;
        DeleteMode = true;
        ShowMode = false;
        UpdateCardHeader();
    }
    private void ChangeToShowMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = true;
        UpdateCardHeader();
    }

}